//the design of the node
//properties of a node
//  1. A node contains data
//  2. It has a parent -> pointer to parent => parent property
//  3. It has children -> pointer to children => children property

function Node(data) {
    this.data = data;
    this.parent = null;
    this.children = [];
}


//the design of the tree
//properties of the tree
//  1. rootNode - pointer to the root node of the tree
//  2. traverseNodes -traverses nodes of a tree
//  3. contains - searches for a node in a tree
//  4. add - adds a node to a tree
//  5. remove - removes a node in a tree

function Tree(data) {
    var node = new Node(data);
    this._root = node;
}

var tree = new Tree('one');
tree._root.children.push(new Node('two'));
tree._root.children[0].parent = tree;

tree._root.children.push(new Node('three'));
tree._root.children[1].parent = tree;

tree._root.children.push(new Node('four'));
tree._root.children[2].parent = tree;

tree._root.children[0].children.push(new Node('five'));
tree._root.children[0].children[0].parent = tree._root.children[0];

tree._root.children[0].children.push(new Node('six'));
tree._root.children[0].children[1].parent = tree._root.children[0];

tree._root.children[2].children.push(new Node('seven'));
tree._root.children[2].children[0].parent = tree._root.children[2];

/*
 
creates this tree
 
 one
 ├── two
 │   ├── five
 │   └── six
 ├── three
 └── four
     └── seven
 
*/

Tree.prototype.traverseDF = function(callback) {
    //this is a recursive and immediately-invoking function
    (function recurse(currentNode){
        for(var i = 0, length = currentNode.children.length; i < length; i++) {
            recurse(currentNode.children[i]);
        }
        
        callback(currentNode);
    })(this._root);
};

Tree.prototype.contains = function(callback, traversalMethod) {
    traversalMethod.call(this, callback);
};

Tree.prototype.add = function(data, toData, traversalMethod) {
    var child = new Node(data),
    parent = null,
    callback = function(node) {
        if(node.data === toData) {
            parent = node;
        }
    };
    
    this.contains(callback, traversalMethod);
    
    if(parent) {
        parent.children.push(child);
        child.parent = parent;
    } else {
        throw new Error('Cannot add node to a non-existent parent.');    
    }
};

Tree.prototype.remove = function(data, fromData, traversalMethod) {
    var tree = this,
        parent = null,
        childToRemove = null,
        index;
        
    //we'll pass the node we want to remove to the callback    
    var callback = function(node) {
        if(node.data === fromData) {
            parent = node;
        }
    };
    
    this.contains(callback, traversalMethod);
    
    if(parent) {
        index = findIndex(parent.children, data);
        
        if(index === undefined) {
            throw new Error('Node to remove does not exist');
        } else {
            childToRemove = parent.children.splice(index, 1);
        }
    } else {
        throw new Error('Parent does not exist.')
    }
    
    return childToRemove;
};

function findIndex(arr, data) {
    var index;
    
    for(var i = 0, length = arr.length; i < length; i ++) {
        if(arr[i].data === data) {
            index = i;
        }
    }
    
    return index;
};


tree.contains(function(node) {
    if(node.data === 'two') {
        console.log(node);
    }
}, tree.traverseDF);

//simulating a hierarchy based tree
var corporateTree = new Tree('CEO');

corporateTree.add('VP of Happiness', 'CEO', tree.traverseDF);
corporateTree.add('VP of Finance', 'CEO', tree.traverseDF);
corporateTree.add('VP of Sadness', 'CEO', tree.traverseDF);

corporateTree.add('Director of Puppies', 'VP of Finance', tree.traverseDF);
corporateTree.add('Manager of Puppies', 'Director of Puppies', tree.traverseDF);

corporateTree.remove('Manager of Puppies', 'Director of Puppies', tree.traverseDF);

corporateTree.traverseDF(function(node) {
    console.log(node.data);
});